// generated by collections; DO NOT EDIT

package main

import (
	"fmt"
	"sort"
)

type EligiblePersonFilterFunc func(item Person) bool

func (collection Persons) Filter(eligible EligiblePersonFilterFunc) Persons {
	var result Persons
	for _, item := range collection {
		if !eligible(item) {
			result = append(result, item)
		}
	}
	return result
}

func (collection Persons) All(eligible EligiblePersonFilterFunc) Persons {
	var result Persons
	for _, item := range collection {
		if eligible(item) {
			result = append(result, item)
		}
	}
	return result
}

func (collection Persons) First() Person {
	if len(collection) == 0 {
		return Person{}
	}
	return collection[0]
}

type PersonLessFunc func(item, other Person) bool

func (collection Persons) Sort(less PersonLessFunc) Persons {
	cCopy := collection
	sort.Slice(cCopy, func(i, j int) bool {
		return less(cCopy[i], cCopy[j])
	})
	return cCopy
}

type PersonApplyFunc func(item Person)

func (collection Persons) Apply(applyFunc PersonApplyFunc) {
	for _, item := range collection {
		applyFunc(item)
	}
}

func (collection Persons) Println() {
	collection.Apply(func(item Person) {
		fmt.Println(item)
	})
}

func (collection Persons) Print() {
	collection.Apply(func(item Person) {
		fmt.Print(item)
	})
}

func (collection Persons) String() string {
	var result string
	for _, item := range collection {
		result = result + fmt.Sprintln(item)
	}
	return result
}
